Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000



2. Find the total number of distinct records for the primary keys in each of the tables listed below:

i. Business = 10000
ii. Hours = 1562
iii. Category = 2643
iv. Attribute = 1115
v. Review = 10000
vi. Checkin = 493
vii. Photo = 10000
viii. Tip = 3979
ix. User = 10000
x. Friend = 11
xi. Elite_years = 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	no

	SQL code used to arrive at answer:
	
SELECT COUNT(*) FROM user
WHERE id is NULL 
OR name is NULL 
OR review_count is NULL 
OR yelping_since is NULL 
OR useful is NULL 
OR funny is NULL 
OR cool is NULL
OR fans is NULL 
OR average_stars is NULL 
OR compliment_hot is NULL 
OR compliment_more is NULL 
OR compliment_profile is NULL 
OR compliment_cute is NULL 
OR compliment_list is NULL 
OR compliment_note is NULL 
OR compliment_plain is NULL 
OR compliment_cool is NULL 
OR compliment_funny is NULL 
OR compliment_writer is NULL 
OR compliment_photos is NULL

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:		max:		avg:
		1			5			3.7082
	
	ii. Table: Business, Column: Stars
	
		min:		max:		avg:
		1.0			5.0			3.6549
	
	iii. Table: Tip, Column: Likes
	
		min:		max:		avg:
		0			2			0.0144
	
	iv. Table: Checkin, Column: Count
	
		min:		max:		avg:
		1			53			1.9414
	
	v. Table: User, Column: Review_count
	
		min:		max:		avg:
		0			2000		24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT SUM(review_count) AS total_reviews, city
FROM business
GROUP BY city
ORDER BY total_reviews DESC
	
	Copy and Paste the Result Below:
	
+---------------+-----------------+
| total_reviews | city            |
+---------------+-----------------+
|         82854 | Las Vegas       |
|         34503 | Phoenix         |
|         24113 | Toronto         |
|         20614 | Scottsdale      |
|         12523 | Charlotte       |
|         10871 | Henderson       |
|         10504 | Tempe           |
|          9798 | Pittsburgh      |
|          9448 | Montréal        |
|          8112 | Chandler        |
|          6875 | Mesa            |
|          6380 | Gilbert         |
|          5593 | Cleveland       |
|          5265 | Madison         |
|          4406 | Glendale        |
|          3814 | Mississauga     |
|          2792 | Edinburgh       |
|          2624 | Peoria          |
|          2438 | North Las Vegas |
|          2352 | Markham         |
|          2029 | Champaign       |
|          1849 | Stuttgart       |
|          1520 | Surprise        |
|          1465 | Lakewood        |
|          1155 | Goodyear        |
+---------------+-----------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars, COUNT(stars)
FROM business 
WHERE city = 'Avon'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------+
| stars | COUNT(stars) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, COUNT(stars)
FROM business 
WHERE city = 'Beachwood'
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
		
+-------+--------------+
| stars | COUNT(stars) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT id, review_count
FROM user 
ORDER BY review_count DESC
LIMIT 3

	Copy and Paste the Result Below:
		
+------------------------+--------------+
| id                     | review_count |
+------------------------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| -3s52C4zL_DHRK0ULG6qtg |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+------------------------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
SELECT
COUNT(id),
AVG(review_count),
AVG(fans),
CASE WHEN review_count < 20 THEN 'extra small'
  WHEN review_count >= 20 AND review_count < 400 THEN 'small'
  WHEN review_count >= 400 AND review_count < 700 THEN 'medium'
  WHEN review_count >= 700 AND review_count < 1000 THEN 'large' 
  WHEN review_count >= 1000 THEN 'extra large' 
  END AS 'class'
FROM user 
GROUP BY class
ORDER BY review_count DESC

+-----------+-------------------+----------------+-------------+
| COUNT(id) | AVG(review_count) |      AVG(fans) | class       |
+-----------+-------------------+----------------+-------------+
|         8 |          1342.125 |        129.625 | extra large |
|        13 |     841.923076923 |  120.384615385 | large       |
|        55 |     517.618181818 |  43.1818181818 | medium      |
|      2082 |     73.0283381364 |  4.12055715658 | small       |
|      7842 |      5.2026268809 | 0.170874776843 | extra small |
+-----------+-------------------+----------------+-------------+

A scatterplot of average number of reviews and average number of fans shows a positive relationship between the two factors.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
love
	
	SQL code used to arrive at answer:
	
SELECT (SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%love%')
	AS love,
	(SELECT COUNT(*)
	FROM review
	WHERE text LIKE '%hate%')
	AS hate

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT id, name, fans
FROM user
ORDER BY fans DESC
LIMIT 10
	
	Copy and Paste the Result Below:

	+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	
SELECT
id, fans, useful + funny, (select AVG(fans) from user) as average_fans, (select AVG(useful + funny) from user) as average_UF
FROM user
ORDER BY fans DESC
LIMIT 10
	
	Copy and Paste the Result Below:
	
+------------------------+------+----------------+--------------+------------+
| id                     | fans | useful + funny | average_fans | average_UF |
+------------------------+------+----------------+--------------+------------+
| -9I98YbNQnLdAmcYfb324Q |  503 |           5780 |       1.4896 |     62.849 |
| -8EnCioUmDygAbsYZmTeRQ |  497 |            395 |       1.4896 |     62.849 |
| --2vR0DIsmQ6WfcSzKWigw |  311 |         245340 |       1.4896 |     62.849 |
| -G7Zkl1wIWBBmD0KRy_sCw |  253 |          19848 |       1.4896 |     62.849 |
| -0IiMAZI2SsQ7VmyzJjokQ |  173 |          11480 |       1.4896 |     62.849 |
| -g3XIcCb2b-BD0QBCcq2Sw |  159 |             61 |       1.4896 |     62.849 |
| -9bbDysuiWeo2VShFJJtcw |  133 |           1734 |       1.4896 |     62.849 |
| -FZBTkAZEXoP7CYvRV2ZwQ |  126 |          18724 |       1.4896 |     62.849 |
| -9da1xk7zgnnfO1uTVYGkA |  124 |          17457 |       1.4896 |     62.849 |
| -lh59ko3dxChBSZ9U7LfUw |  120 |            605 |       1.4896 |     62.849 |
+------------------------+------+----------------+--------------+------------+
	
	Please explain your findings and interpretation of the results:
	
	9 of the top 10 users (in other words, 90% of the top 10) exceed the average funny or useful rating, so there is a strong relationship between number of fans and a useful or funny rating.
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

i. Do the two groups you chose to analyze have a different distribution of hours?

Two of the 4-5 star restaurants open later in the day than two of the 2-3 star restaurants.  One 4-5 star restaurant has the same hours as a 2-3 star restaurant.

ii. Do the two groups you chose to analyze have a different number of reviews?
         
The 4-5 star restaurants have a higher average number of reviews.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

Based on the longitude column, the 4-5 star restaurants are all further west than the 2-3 star restaurants (which are in the Downtown Core or the Entertainment District).

SQL code used for analysis:

SELECT B.id, B.name, H.hours, B.review_count, B.latitude, B.longitude, neighborhood, 
CASE WHEN (stars >= 2 AND stars <= 3) THEN '2-3'
	WHEN (stars >= 4 AND stars <= 5) THEN '4-5' END Rank
FROM business B INNER JOIN hours H
	ON B.id = H.business_id INNER JOIN category C
	ON H.business_id = C.business_id
WHERE city = 'Toronto' 
	AND category = 'Restaurants'
	AND rank IN ('2-3', '4-5')
	AND HOURS like '%Friday%' --One day of the week chosen for comparison
ORDER BY rank, H.hours ASC
		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
         
Open businesses have more reviews on average than closed businesses.

ii. Difference 2:
         
Open businesses have shorter reviews on average than closed businesses.
         
SQL code used for analysis:

SELECT 
(SELECT AVG(LENGTH(review.text))
FROM review INNER JOIN
business ON review.business_id = business.id
WHERE is_open = 1) as open_review_length,

(SELECT AVG(LENGTH(review.text))
FROM review INNER JOIN
business ON review.business_id = business.id
WHERE is_open = 0) as closed_review_length,

(SELECT AVG(review_count)
FROM business
WHERE is_open = 1) as open_avg_reviews,
(SELECT AVG(review_count)
FROM business
WHERE is_open = 0) as closed_avg_reviews,

(SELECT AVG(stars)
FROM business
WHERE is_open = 1) as open_avg_stars,

(SELECT AVG(stars)
FROM business 
WHERE is_open = 0) as closed_avg_stars


+--------------------+----------------------+------------------+--------------------+----------------+------------------+
| open_review_length | closed_review_length | open_avg_reviews | closed_avg_reviews | open_avg_stars | closed_avg_stars |
+--------------------+----------------------+------------------+--------------------+----------------+------------------+
|      595.653097345 |        766.577464789 |    31.7570754717 |      23.1980263158 |  3.67900943396 |    3.52039473684 |
+--------------------+----------------------+------------------+--------------------+----------------+------------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
I would like to predict the number of fans a user will have.  To do this, I will select a number of numerical variables that can be entered as the x-values in a multiple regression formula (using Excel or R).  The number of fans will be entered as the y-values.  The regression analysis would have more accurate results if all 10,000 rows could be entered, but since we are restricted to 25 rows, I will use averages and group the results by number of years yelping.


ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
                           
For my regression analysis, I will select the number of years the user has been yelping.  Presumably users will accumulate more fans the longer they have been posting reviews.  I will not also include the number of reviews, since that number is probably  correlated to the number of years yelping.

I will also look at some of the qualitative ratings such as "useful."  Since "funny" and "cool" tend to have relatively low values, I will combine them into a single variable "funny_cool."  Some people may be fans based on the attractiveness of the user, so I will combine "compliment_hot" and "compliment_cute."  I will also include "compliment_photos."


iii. Output of your finished dataset:

+-------+---------------+----------------+-----------------+------------------------+-----------------+
| years |   AVG(useful) |     funny_cool |        cute_hot | AVG(compliment_photos) |       AVG(fans) |
+-------+---------------+----------------+-----------------+------------------------+-----------------+
|    13 | 486.923076923 |  872.230769231 |   68.0769230769 |          4.69230769231 |   22.8461538462 |
|    12 | 377.387755102 |  366.346938776 |   22.2653061224 |          4.12244897959 |   13.4081632653 |
|    11 |         111.0 |  118.496240602 |   39.7518796992 |          4.57142857143 |   13.5413533835 |
|    10 |  115.95970696 |  142.344322344 |   13.5238095238 |          2.61538461538 |   5.49084249084 |
|     9 | 70.3664717349 |  84.4561403509 |   6.95711500975 |          2.32553606238 |   4.55165692008 |
|     8 | 47.8564294632 |  50.7802746567 |   2.34456928839 |         0.578027465668 |    2.2684144819 |
|     7 | 18.2895377129 |   15.295214923 |   2.13300892133 |         0.828872668289 |    1.8799675588 |
|     6 | 128.431357254 |  225.551482059 |   9.22932917317 |          19.6146645866 |   1.39313572543 |
|     5 | 13.1789627465 |   12.249817385 |  0.495252008766 |         0.345507669832 |  0.740686632579 |
|     4 | 9.04931862427 |  3.29396495782 |  0.321219987021 |          0.19727449708 |  0.476963011032 |
|     3 | 9.72600834492 |  15.5278164117 |  0.185674547983 |         0.200973574409 |  0.360222531293 |
|     2 | 1.27085377821 | 0.701668302257 | 0.0333660451423 |        0.0215897939156 |   0.10598626104 |
|     1 | 1.25595238095 |  1.47916666667 |  0.014880952381 |       0.00595238095238 | 0.0327380952381 |
+-------+---------------+----------------+-----------------+------------------------+-----------------+

iv. Provide the SQL code you used to create your final dataset:

SELECT 
(DATE('NOW') - yelping_since) AS years, 
AVG(useful), 
AVG(funny + cool) AS funny_cool, 
AVG(compliment_cute + compliment_hot) AS cute_hot, 
AVG(compliment_photos),
AVG(fans)
from user
GROUP BY years
ORDER BY years DESC
